{"version":3,"sources":["App.js","index.js"],"names":["getFix","matrixType","isBeginning","code","tokens","split","length","Cell","props","className","onFocus","e","target","select","style","width","height","fontSize","value","onChange","App","useState","numRows","setNumRows","numCols","setNumCols","matrixData","setMatrixData","setMatrixType","rightAlign","setRightAlign","matrixName","setMatrixName","tableData","r","rowData","onClick","dataCopy","i","slice","Array","fill","cursor","c","push","latexCode","data","convertToLatex","updateRows","newNumRows","updateCols","newNumCols","Container","Form","Label","column","sm","Control","type","parseInt","min","Group","Button","variant","Row","Col","xs","map","index","as","controlId","Check","label","checked","navigator","clipboard","writeText","readOnly","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1281d0c0.chunk.js","sourcesContent":["import './App.css';\n\nimport React, { useState } from 'react';\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction getFix(matrixType, isBeginning) {\n    let code = \"\\\\\" + (isBeginning ? \"begin\" : \"end\") + \"{\";\n    let tokens = matrixType.split('_');\n\n    switch(tokens[0]) {\n        case \"parentheses\":\n            code += \"pmatrix\";\n            break;\n        case \"brackets\":\n            code += \"bmatrix\";\n            break;\n        case \"determinant\":\n            code += \"vmatrix\";\n            break;\n        case \"ddeterminant\":\n            code += \"Vmatrix\";\n            break;\n    }\n    if(tokens.length > 1) {\n        if(tokens[1] == 'right') {\n            code += \"*}\" + (isBeginning ? \"[r]\" : \"\");\n        }\n    }\n    else {\n        code += \"}\"\n    }\n    code += '\\n';\n    return code;\n}\n\nfunction convertToLatex(data, numRows, numCols, matrixType) {\n    let code = \"\";\n\n    if(matrixType != \"none\") code += getFix(matrixType, true);\n    for(let r = 0; r < numRows; r++) {\n        for(let c = 0; c < numCols; c++) {\n            code += data[r][c];\n            if(c != numCols - 1) {\n                code += \" & \";\n            }\n        }\n        code += \" \\\\\\\\ \\n\";\n    }\n    if(matrixType != \"none\") code += getFix(matrixType, false);\n\n    return code;\n}\n\nfunction Cell(props) {\n    return (\n        <input className=\" \" onFocus={(e) => e.target.select()} style={{\n            width: \"50px\",\n            height: \"40px\",\n            fontSize: \"14px\"\n        }} value={props.value} onChange={props.onChange}></input>\n    );\n}\n\nfunction App() {\n    const [numRows, setNumRows] = useState(3);\n    const [numCols, setNumCols] = useState(3);\n    const [matrixData, setMatrixData] = useState([['', '', ''], ['', '', ''], ['', '', '']]);\n    const [matrixType, setMatrixType] = useState(\"parentheses\");\n    const [rightAlign, setRightAlign] = useState(false);\n    const [matrixName, setMatrixName] = useState(\"A\");\n    \n    let tableData = [];\n    for(let r = 0; r < numRows; r++) {\n        let rowData = [<th className=\"text-end pe-3\" onClick={() => {\n            let dataCopy = [];\n            for (var i = 0; i < matrixData.length; i++) {\n                dataCopy[i] = matrixData[i].slice();\n            }\n            dataCopy[r] = new Array(numCols).fill('');\n            setMatrixData(dataCopy);\n        }} style={{width: \"50px\", height: \"40px\", cursor: \"not-allowed\"}}>{r + 1}</th>];\n        for(let c = 0; c < numCols; c++) {\n            rowData.push(<td>\n                <Cell value={matrixData[r][c]} onChange={(e) => {\n                    let dataCopy = [];\n                    for (var i = 0; i < matrixData.length; i++) {\n                        dataCopy[i] = matrixData[i].slice();\n                    }\n                    dataCopy[r][c] = e.target.value;\n                    setMatrixData(dataCopy);\n                }}/>\n            </td>);\n        }\n        tableData.push(<tr>\n            {rowData}\n        </tr>);\n    }\n\n    let latexCode = convertToLatex(matrixData, numRows, numCols, matrixType + (rightAlign ? \"_right\" : \"\"));\n\n    function updateRows(newNumRows) {\n        if(matrixData.length < newNumRows) {\n            let dataCopy = [];\n            for (var i = 0; i < matrixData.length; i++) {\n                dataCopy[i] = matrixData[i].slice();\n            }\n            while(dataCopy.length < newNumRows) {\n                dataCopy.push(new Array(numCols).fill(''));\n            }\n            setMatrixData(dataCopy);\n        }\n        setNumRows(newNumRows);\n    }\n\n    function updateCols(newNumCols) {\n        if(matrixData[0].length < newNumCols) {\n            let dataCopy = [];\n            for (var i = 0; i < matrixData.length; i++) {\n                dataCopy[i] = matrixData[i].slice();\n                while(dataCopy[i].length < newNumCols) dataCopy[i].push(\"\");\n            }\n            setMatrixData(dataCopy);\n        }\n        setNumCols(newNumCols);\n    }\n\n    return (\n        <Container className=\"mb-5\">\n            <h1 className=\"text-center mt-3\">LaTeX Matrix Generator</h1>\n            <div className=\"w-50 mx-auto mt-5\">\n                <Form className=\"d-flex\">\n                    <Form.Label column sm={3} className=\"me-3 my-auto align-middle\"><strong>Rows: </strong></Form.Label>\n                    <Form.Control column sm={3} type=\"number\" value={numRows} onChange={(e) => {\n                        updateRows(parseInt(e.target.value));\n                    }} style={{width: \"200px\"}} min=\"0\" data-bind=\"value:replyNumber\"/>\n                    <Form.Group column sm={3} className=\"ms-3\">\n                        <Button variant=\"success\" className=\"me-3\" onClick={(e) => {\n                            updateRows(numRows + 1);\n                        }}>\n                            Add\n                        </Button>\n                        <Button variant=\"danger\" onClick={(e) => {\n                            if(numRows > 0) setNumRows(numRows - 1);\n                        }}>\n                            Sub\n                        </Button>\n                    </Form.Group>\n                </Form>\n                <Form className=\"d-flex mt-3\">\n                    <Form.Label column sm={3} className=\"me-3 my-auto align-middle\"><strong>Columns: </strong></Form.Label>\n                    <Form.Control  column sm={3} type=\"number\" value={numCols} onChange={(e) => {\n                        updateCols(parseInt(e.target.value));\n                    }} style={{width: \"200px\"}}/>\n                    <Form.Group column sm={3} className=\"ms-3\">\n                        <Button variant=\"success\" className=\"me-3\" onClick={(e) => {\n                            updateCols(numCols + 1);\n                        }}>\n                            Add\n                        </Button>\n                        <Button variant=\"danger\" onClick={(e) => {\n                            if(numCols > 0) updateCols(numCols - 1);\n                        }}>\n                            Sub\n                        </Button>\n                    </Form.Group>\n                </Form>\n            </div>\n            <Row className=\"mx-auto mt-5\">\n                <Col xs={6}>\n                    <Row>\n                        <Col xs={9}>\n                            <table className=\"mx-auto\">\n                                <thead className=\"text-center\" style={{fontSize: \"0.9rem\"}}>\n                                    <tr>\n                                        <th></th>\n                                        {\n                                            Array(numCols).fill(0).map((value, index) => {\n                                                return <th style={{cursor: \"not-allowed\"}}className=\"pb-1\" onClick={() => {\n                                                    let dataCopy = [];\n                                                    for (var i = 0; i < matrixData.length; i++) {\n                                                        dataCopy[i] = matrixData[i].slice();\n                                                    }\n                                                    for(let r = 0; r < numRows; r++) {\n                                                        dataCopy[r][index] = '';\n                                                    }\n                                                    setMatrixData(dataCopy);\n                                                }}>{index+1}</th>\n                                            })\n                                        }\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {tableData}\n                                </tbody>\n                            </table>\n                        </Col>\n                        <Col xs={3}>\n                            <div className=\"d-flex flex-column\">\n                                <Form.Control as=\"select\" className=\"mb-3\" value={matrixType} onChange={(e) => {\n                                    setMatrixType(e.target.value);\n                                }}>\n                                    <option value=\"parentheses\">Parentheses</option>\n                                    <option value=\"brackets\">Brackets</option>\n                                    <option value=\"determinant\">Determinant</option>\n                                    <option value=\"ddeterminant\">DDeterminant</option>\n                                    <option value=\"none\">None</option>\n                                </Form.Control>\n                                <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                                    <Form.Check type=\"checkbox\" label=\"Right Align\" checked={rightAlign} onClick={(e) => {\n                                        setRightAlign(e.target.checked);\n                                    }}/>\n                                </Form.Group>\n                                <Button variant=\"success\" className=\"mb-3\" onClick = {() => {\n                                    navigator.clipboard.writeText(latexCode);\n                                }}>\n                                    Copy LaTeX\n                                </Button>\n                                <Button className=\"mb-3\" variant=\"danger\" onClick = {() => {\n                                    let dataCopy = [];\n                                    for(let r = 0; r < numRows; r++) {\n                                        dataCopy.push(new Array(numCols).fill(''));\n                                    }\n                                    setMatrixData(dataCopy);\n                                }}>Clear Matrix</Button>\n                                <hr/>\n                                <Form className=\"d-flex mb-3\">\n                                    <Form.Label className=\"me-3 my-auto align-middle\">Name: </Form.Label>\n                                    <Form.Control type=\"input\" value={matrixName} onChange={(e) => {\n                                        setMatrixName(e.target.value)\n                                    }} style={{width: \"75px\"}}/>\n                                </Form>\n                                <Button className=\"mb-3\" variant=\"success\" onClick = {() => {\n                                    let dataCopy = [];\n                                    for (var i = 0; i < matrixData.length; i++) {\n                                        dataCopy[i] = matrixData[i].slice();\n                                    }\n\n                                    for(let r = 0; r < numRows; r++) {\n                                        for(let c = 0; c < numCols; c++) {\n                                            dataCopy[r][c] = matrixName + \"_{\" + (r + 1) + \"\" + (c + 1) + \"}\";\n                                        }\n                                    }\n\n                                    setMatrixData(dataCopy);\n                                }}>Set Indices</Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col xs={6}>\n                    <textarea readOnly className=\"d-block w-50 mx-auto\" value={latexCode} \n                        style={{height: \"300px\", fontSize: \"14px\"}}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}