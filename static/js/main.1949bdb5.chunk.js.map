{"version":3,"sources":["App.js","index.js"],"names":["getFix","matrixType","isBeginning","code","tokens","split","length","Cell","props","className","onFocus","e","target","select","style","width","height","fontSize","value","onChange","NumberSelector","Form","Label","column","sm","name","Control","type","updateValue","parseInt","maxWidth","min","Group","Button","variant","onClick","App","useState","numRows","setNumRows","numCols","setNumCols","matrixData","setMatrixData","setMatrixType","rightAlign","setRightAlign","matrixName","setMatrixName","tableData","r","rowData","dataCopy","i","slice","Array","fill","cursor","c","push","latexCode","data","substring","convertToLatex","Container","newNumRows","newNumCols","Row","Col","md","overflowX","map","index","Card","Header","Body","as","controlId","Check","label","checked","navigator","clipboard","writeText","block","j","temp","readOnly","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1949bdb5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Container, Form, Button, Row, Col, Card } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst cellWidth = \"5em\";\nconst cellHeight = \"3em\";\n\nfunction getFix(matrixType, isBeginning) {\n    let code = \"\\\\\" + (isBeginning ? \"begin\" : \"end\") + \"{\";\n    let tokens = matrixType.split('_');\n\n    switch(tokens[0]) {\n        case \"parentheses\":\n            code += \"pmatrix\";\n            break;\n        case \"brackets\":\n            code += \"bmatrix\";\n            break;\n        case \"determinant\":\n            code += \"vmatrix\";\n            break;\n        case \"ddeterminant\":\n            code += \"Vmatrix\";\n            break;\n        default:\n            break;\n    }\n    if(tokens.length > 1) {\n        if(tokens[1] === 'right') {\n            code += \"*}\" + (isBeginning ? \"[r]\" : \"\");\n        }\n    }\n    else {\n        code += \"}\"\n    }\n    code += '\\n';\n    return code;\n}\n\nfunction convertToLatex(data, numRows, numCols, matrixType) {\n    let code = \"\";\n\n    if(matrixType.substring(0, 4) !== \"none\") code += getFix(matrixType, true);\n    for(let r = 0; r < numRows; r++) {\n        for(let c = 0; c < numCols; c++) {\n            code += data[r][c];\n            if(c !== numCols - 1) {\n                code += \" & \";\n            }\n        }\n        code += \" \\\\\\\\ \\n\";\n    }\n    if(matrixType.substring(0, 4) !== \"none\") code += getFix(matrixType, false);\n\n    return code;\n}\n\nfunction Cell(props) {\n    return (\n        <input className=\" \" onFocus={(e) => e.target.select()} style={{\n            width: cellWidth,\n            height: cellHeight,\n            fontSize: \"1em\"\n        }} value={props.value} onChange={props.onChange}></input>\n    );\n}\n\nfunction NumberSelector(props) {\n    return (\n        <Form className={\"d-flex justify-content-center \" + props.className}>\n            <Form.Label column sm={2} className=\"me-3 my-auto align-middle\"><strong>{props.name}: </strong></Form.Label>\n            <Form.Control column sm={3} type=\"number\" value={props.value} onChange={(e) => {\n                props.updateValue(parseInt(e.target.value));\n            }} style={{maxWidth: \"5em\"}} min=\"0\" data-bind=\"value:replyNumber\"/>\n            <Form.Group column sm={3} className=\"ms-3 d-none d-md-inline-block\">\n                <Button variant=\"success\" className=\"me-3\" onClick={(e) => {\n                    props.updateValue(props.value + 1);\n                }}>\n                    Add\n                </Button>\n                <Button variant=\"danger\" onClick={(e) => {\n                    if(props.value > 0) props.updateValue(props.value - 1);\n                }}>\n                    Sub\n                </Button>\n            </Form.Group>\n        </Form>\n    );\n}\n\nfunction App() {\n    const [numRows, setNumRows] = useState(3);\n    const [numCols, setNumCols] = useState(3);\n    const [matrixData, setMatrixData] = useState([['', '', ''], ['', '', ''], ['', '', '']]);\n    const [matrixType, setMatrixType] = useState(\"parentheses\");\n    const [rightAlign, setRightAlign] = useState(true);\n    const [matrixName, setMatrixName] = useState(\"A\");\n    \n    let tableData = [];\n    for(let r = 0; r < numRows; r++) {\n        let rowData = [<th className=\"text-end pe-3\" onClick={() => {\n            let dataCopy = [];\n            for (var i = 0; i < matrixData.length; i++) {\n                dataCopy[i] = matrixData[i].slice();\n            }\n            dataCopy[r] = new Array(numCols).fill('');\n            setMatrixData(dataCopy);\n        }} style={{width: cellWidth, height: cellHeight, cursor: \"not-allowed\"}}>{r + 1}</th>];\n        for(let c = 0; c < numCols; c++) {\n            rowData.push(<td>\n                <Cell value={matrixData[r][c]} onChange={(e) => {\n                    let dataCopy = [];\n                    for (var i = 0; i < matrixData.length; i++) {\n                        dataCopy[i] = matrixData[i].slice();\n                    }\n                    dataCopy[r][c] = e.target.value;\n                    setMatrixData(dataCopy);\n                }}/>\n            </td>);\n        }\n        tableData.push(<tr>\n            {rowData}\n        </tr>);\n    }\n\n    let latexCode = convertToLatex(matrixData, numRows, numCols, matrixType + (rightAlign ? \"_right\" : \"\"));\n\n    function updateRows(newNumRows) {\n        if(matrixData.length < newNumRows) {\n            let dataCopy = [];\n            for (var i = 0; i < matrixData.length; i++) {\n                dataCopy[i] = matrixData[i].slice();\n            }\n            while(dataCopy.length < newNumRows) {\n                dataCopy.push(new Array(numCols).fill(''));\n            }\n            setMatrixData(dataCopy);\n        }\n        setNumRows(newNumRows);\n    }\n\n    function updateCols(newNumCols) {\n        if(matrixData[0].length < newNumCols) {\n            let dataCopy = [];\n            for (var i = 0; i < matrixData.length; i++) {\n                dataCopy[i] = matrixData[i].slice();\n                while(dataCopy[i].length < newNumCols) dataCopy[i].push(\"\");\n            }\n            setMatrixData(dataCopy);\n        }\n        setNumCols(newNumCols);\n    }\n\n    return (\n        <Container className=\"mb-5\">\n            <h1 className=\"text-center mt-3\">LaTeX Matrix Generator</h1>\n            <h6 className=\"text-center mx-auto text-secondary\">The LaTeX packages amsmath and mathtools are required to use generated code.</h6>\n            <div className=\"w-50 mx-auto mt-3\">\n                <NumberSelector\n                    name=\"Rows\"\n                    value={numRows}\n                    updateValue={updateRows}\n                />\n                <NumberSelector\n                    name=\"Cols\"\n                    value={numCols}\n                    className=\"mt-2\"\n                    updateValue={updateCols}\n                />\n            </div>\n            <hr className=\"w-50 mx-auto\"/>\n            <Row className=\"mx-auto my-5\">\n                <Col md={9} style={{overflowX: 'scroll'}} className=\"mb-4\">\n                    <table className=\"mx-auto mb-3\">\n                        <thead className=\"text-center\" style={{fontSize: \"0.9rem\"}}>\n                            <tr>\n                                <th></th>\n                                {\n                                    Array(numCols).fill(0).map((value, index) => {\n                                        return <th style={{cursor: \"not-allowed\"}}className=\"pb-1\" onClick={() => {\n                                            let dataCopy = [];\n                                            for (var i = 0; i < matrixData.length; i++) {\n                                                dataCopy[i] = matrixData[i].slice();\n                                            }\n                                            for(let r = 0; r < numRows; r++) {\n                                                dataCopy[r][index] = '';\n                                            }\n                                            setMatrixData(dataCopy);\n                                        }}>{index+1}</th>\n                                    })\n                                }\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {tableData}\n                        </tbody>\n                    </table>\n                </Col>\n                <Col md={3}>\n                    <Card>\n                        <Card.Header>\n                            <h4 className=\"text-center font-weight-bold\">Options</h4>\n                        </Card.Header>\n                        <Card.Body className=\"d-flex flex-column\">\n                            <Form.Control as=\"select\" className=\"mb-3\" value={matrixType} onChange={(e) => {\n                                setMatrixType(e.target.value);\n                            }}>\n                                <option value=\"parentheses\">Parentheses</option>\n                                <option value=\"brackets\">Brackets</option>\n                                <option value=\"determinant\">Determinant</option>\n                                <option value=\"ddeterminant\">DDeterminant</option>\n                                <option value=\"none\">None</option>\n                            </Form.Control>\n                            <Form.Group className=\"\" controlId=\"formBasicCheckbox\">\n                                <Form.Check type=\"checkbox\" label=\"Right Align\" checked={rightAlign} onClick={(e) => {\n                                    setRightAlign(e.target.checked);\n                                }}/>\n                            </Form.Group>\n                            <hr/>\n                            <Button variant=\"success\" className=\"mb-3 mx-auto\" style={{maxWidth: \"max(8em, 50%)\"}} onClick = {() => {\n                                navigator.clipboard.writeText(latexCode);\n                            }}>\n                                Copy LaTeX\n                            </Button>{' '}\n                            <Button className=\"mx-auto\" style={{maxWidth: \"max(8em, 50%)\"}} variant=\"danger\" block={false} onClick = {() => {\n                                let dataCopy = [];\n                                for(let r = 0; r < numRows; r++) {\n                                    dataCopy.push(new Array(numCols).fill(''));\n                                }\n                                setMatrixData(dataCopy);\n                            }}>Clear Matrix</Button>\n                            <hr/>\n                            <Form className=\"d-flex mb-3\">\n                                <Form.Label className=\"me-3 my-auto align-middle\">Name: </Form.Label>\n                                <Form.Control type=\"input\" value={matrixName} onChange={(e) => {\n                                    setMatrixName(e.target.value)\n                                }} style={{maxWidth: \"5em\"}}/>\n                            </Form>\n                            <Button className=\"mx-auto\" style={{maxWidth: \"max(8em, 50%)\"}} variant=\"success\" block={false}  onClick = {() => {\n                                let dataCopy = [];\n                                for (var i = 0; i < matrixData.length; i++) {\n                                    dataCopy[i] = matrixData[i].slice();\n                                }\n\n                                for(let r = 0; r < numRows; r++) {\n                                    for(let c = 0; c < numCols; c++) {\n                                        dataCopy[r][c] = matrixName + \"_{\" + (r + 1) + \"\" + (c + 1) + \"}\";\n                                    }\n                                }\n\n                                setMatrixData(dataCopy);\n                            }}>Set Indices</Button>\n                            <hr/>\n                            <Button className=\"mx-auto\" style={{maxWidth: \"max(8em, 50%)\"}} variant=\"success\" block={false}  onClick = {() => {\n                                let dataCopy = [];\n                                for (var i = 0; i < matrixData[0].length; i++) {\n                                    dataCopy.push([]);\n                                    for(var j = 0; j < matrixData.length; j++) {\n                                        dataCopy[i].push(matrixData[j][i]);\n                                    }\n                                }\n\n                                let temp = numRows;\n                                setNumRows(numCols);\n                                setNumCols(temp);\n                                setMatrixData(dataCopy);\n                            }}>Transpose</Button>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <textarea readOnly className=\"d-block w-50 mx-auto\" value={latexCode} \n                    style={{height: \"20em\"}}/>\n            </Row>\n            <Row className=\"mt-5\">\n                <p>Made by <a href=\"https://github.com/Ryan10145/\">Ryan Chang</a> with React.js and react-bootstrap</p>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}